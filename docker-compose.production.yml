version: '3.8'

services:
  surrogate-optim-api:
    image: terragonlabs/surrogate-optim:latest
    container_name: surrogate-optim-api
    ports:
      - "8000:8000"
    environment:
      - SURROGATE_OPTIM_WORKERS=8
      - SURROGATE_OPTIM_MEMORY_LIMIT=16GB
      - SURROGATE_OPTIM_GPU_ENABLED=true
      - SURROGATE_OPTIM_LOG_LEVEL=INFO
      - JAX_ENABLE_X64=true
      - JAX_PLATFORM_NAME=gpu
    volumes:
      - ./data:/workspace/data
      - ./logs:/workspace/logs
      - ./cache:/workspace/cache
      - ./results:/workspace/results
    deploy:
      resources:
        limits:
          memory: 32G
          cpus: '8.0'
        reservations:
          memory: 16G
          cpus: '4.0'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  surrogate-optim-worker:
    image: terragonlabs/surrogate-optim:latest
    container_name: surrogate-optim-worker
    environment:
      - SURROGATE_OPTIM_WORKERS=4
      - SURROGATE_OPTIM_MEMORY_LIMIT=8GB
      - SURROGATE_OPTIM_GPU_ENABLED=false
      - SURROGATE_OPTIM_LOG_LEVEL=INFO
      - WORKER_MODE=true
    volumes:
      - ./data:/workspace/data
      - ./logs:/workspace/logs
      - ./cache:/workspace/cache
      - ./results:/workspace/results
    deploy:
      resources:
        limits:
          memory: 16G
          cpus: '4.0'
        reservations:
          memory: 8G
          cpus: '2.0'
    restart: unless-stopped
    depends_on:
      - surrogate-optim-api
    scale: 2

  redis:
    image: redis:7-alpine
    container_name: surrogate-optim-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru

  prometheus:
    image: prom/prometheus:latest
    container_name: surrogate-optim-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: surrogate-optim-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus

  nginx:
    image: nginx:alpine
    container_name: surrogate-optim-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - surrogate-optim-api
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: surrogate-optim-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 4G
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: surrogate-optim-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/workspace/logs
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: surrogate-optim-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  default:
    driver: bridge