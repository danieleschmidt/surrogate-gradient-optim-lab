name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ============================================================================
  # Dependency Vulnerability Scanning
  # ============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run Safety vulnerability check
      run: |
        safety check --json --output safety-report.json || true
        safety check --full-report || true
    
    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=cyclonedx-json --output=sbom.json || true
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-reports
        path: |
          safety-report.json
          pip-audit-report.json
          sbom.json
        retention-days: 30

  # ============================================================================
  # CodeQL Static Analysis
  # ============================================================================
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # ============================================================================
  # Semgrep Static Analysis
  # ============================================================================
  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Semgrep
      run: |
        semgrep \
          --config=auto \
          --sarif \
          --output=semgrep-results.sarif \
          --error \
          --strict \
          --verbose \
          .
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep-results.sarif

  # ============================================================================
  # Container Security Scanning
  # ============================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip on scheduled runs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: surrogate-optim:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'surrogate-optim:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Grype vulnerability scanner
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        grype surrogate-optim:scan -o sarif > grype-results.sarif
    
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'grype-results.sarif'

  # ============================================================================
  # Secret Scanning
  # ============================================================================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # ============================================================================
  # License Compliance
  # ============================================================================
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pip-licenses licensecheck
    
    - name: Check licenses
      run: |
        echo "## License Report" > license-report.md
        echo "" >> license-report.md
        
        # Generate license list
        pip-licenses --format=markdown --output-file=licenses.md
        cat licenses.md >> license-report.md
        
        # Check for problematic licenses
        licensecheck --zero || echo "License issues found"
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: |
          license-report.md
          licenses.md

  # ============================================================================
  # SLSA Provenance
  # ============================================================================
  provenance:
    name: Generate SLSA Provenance
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      actions: read
      id-token: write
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Generate SLSA provenance
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
      with:
        base64-subjects: "${{ needs.build.outputs.hashes }}"
        upload-assets: true

  # ============================================================================
  # Security Policy Enforcement
  # ============================================================================
  policy-check:
    name: Security Policy Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check security policy compliance
      run: |
        # Check for required security files
        required_files=(
          "SECURITY.md"
          ".github/SECURITY.md"
          "LICENSE"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "‚ùå Missing required security files:"
          printf '  - %s\n' "${missing_files[@]}"
          exit 1
        else
          echo "‚úÖ All required security files present"
        fi
        
        # Check for security best practices
        echo "üîç Checking security best practices..."
        
        # Check for secrets in code
        if grep -r -i "password\|secret\|key\|token" --include="*.py" surrogate_optim/ | grep -v "# noqa" | grep -v "test"; then
          echo "‚ö†Ô∏è  Potential secrets found in code"
        fi
        
        # Check for SQL injection patterns
        if grep -r -i "execute.*%\|format.*sql" --include="*.py" surrogate_optim/; then
          echo "‚ö†Ô∏è  Potential SQL injection patterns found"
        fi
        
        echo "‚úÖ Security policy check completed"

  # ============================================================================
  # Compliance Report
  # ============================================================================
  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql, semgrep, secret-scan, license-scan, policy-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate compliance report
      run: |
        cat > compliance-report.md << 'EOF'
        # Security Compliance Report
        
        Generated: $(date -u)
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        
        ## Scan Results Summary
        
        | Scan Type | Status |
        |-----------|--------|
        | Dependency Vulnerability | ${{ needs.dependency-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
        | CodeQL Analysis | ${{ needs.codeql.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
        | Semgrep Security | ${{ needs.semgrep.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
        | Secret Detection | ${{ needs.secret-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
        | License Compliance | ${{ needs.license-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
        | Security Policy | ${{ needs.policy-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
        
        ## Recommendations
        
        - Review all security scan results in the Actions tab
        - Address any high or critical vulnerabilities immediately
        - Update dependencies regularly to patch known vulnerabilities
        - Monitor security advisories for dependencies
        - Implement additional security controls as needed
        
        ## Next Steps
        
        1. Review detailed scan results in artifacts
        2. Create issues for any security findings
        3. Update security documentation as needed
        4. Schedule regular security reviews
        
        EOF
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md
        retention-days: 90