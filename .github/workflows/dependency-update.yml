name: Dependency Updates

on:
  schedule:
    - cron: '0 9 * * 1'  # Weekly on Monday at 9 AM
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Check for dependency updates
        id: check-updates
        run: |
          # Create requirements files if they don't exist
          if [ ! -f requirements.txt ]; then
            pip-compile pyproject.toml --output-file requirements.txt
          fi
          
          if [ ! -f requirements-dev.txt ]; then
            pip-compile pyproject.toml --extra dev --output-file requirements-dev.txt
          fi
          
          # Check for updates
          pip-compile --upgrade --dry-run pyproject.toml --output-file requirements-new.txt
          pip-compile --upgrade --dry-run pyproject.toml --extra dev --output-file requirements-dev-new.txt
          
          # Compare files
          if ! cmp -s requirements.txt requirements-new.txt || ! cmp -s requirements-dev.txt requirements-dev-new.txt; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            echo "Dependencies updates available"
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
            echo "No dependency updates available"
          fi

      - name: Update dependencies
        if: steps.check-updates.outputs.updates_available == 'true'
        run: |
          # Update requirements files
          pip-compile --upgrade pyproject.toml --output-file requirements.txt
          pip-compile --upgrade pyproject.toml --extra dev --output-file requirements-dev.txt
          
          # Install updated dependencies
          pip install -e ".[dev]"

      - name: Run tests with updated dependencies
        if: steps.check-updates.outputs.updates_available == 'true'
        run: |
          pytest tests/unit/ -v --tb=short

      - name: Run security check on updated dependencies
        if: steps.check-updates.outputs.updates_available == 'true'
        run: |
          pip install safety
          safety check --short-report

      - name: Create Pull Request
        if: steps.check-updates.outputs.updates_available == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "ðŸ”„ Weekly Dependency Updates"
          body: |
            ## ðŸ”„ Automated Dependency Updates
            
            This PR contains automated dependency updates for the week.
            
            ### Changes
            - Updated Python dependencies to latest compatible versions
            - Verified compatibility with existing tests
            - Passed security vulnerability checks
            
            ### Validation
            - âœ… All unit tests pass
            - âœ… Security scan passed
            - âœ… No breaking changes detected
            
            ### Review Checklist
            - [ ] Review dependency changes
            - [ ] Ensure no breaking changes
            - [ ] Verify test coverage remains adequate
            - [ ] Check for any new security vulnerabilities
            
            ---
            ðŸ¤– This PR was created automatically by GitHub Actions
          branch: dependency-updates/weekly-${{ github.run_number }}
          base: main
          labels: |
            dependencies
            automated
            maintenance

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: update-dependencies
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run comprehensive security audit
        run: |
          # Install security tools
          pip install safety pip-audit bandit semgrep
          
          # Run multiple security checks
          echo "## Safety Check" >> security-report.md
          safety check --json --output safety.json || true
          safety check --short-report >> security-report.md || true
          
          echo -e "\n## Pip Audit" >> security-report.md
          pip-audit --format=json --output=pip-audit.json || true
          pip-audit --desc >> security-report.md || true
          
          echo -e "\n## Bandit Static Analysis" >> security-report.md
          bandit -r surrogate_optim -f json -o bandit.json || true
          bandit -r surrogate_optim -f txt >> security-report.md || true

      - name: Upload security audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-results
          path: |
            security-report.md
            safety.json
            pip-audit.json
            bandit.json

      - name: Comment security results on dependency PR
        if: github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './security-report.md';
            
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              
              // Find the most recent dependency update PR
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: context.repo.owner + ':dependency-updates/weekly-' + context.runNumber
              });
              
              if (pulls.length > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pulls[0].number,
                  body: `## ðŸ”’ Security Audit Results\n\n${report}\n\n---\nðŸ¤– Automated security audit completed`
                });
              }
            }