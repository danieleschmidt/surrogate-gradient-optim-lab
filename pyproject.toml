[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "surrogate-gradient-optim-lab"
version = "0.1.0"
description = "Toolkit for offline black-box optimization using learned gradient surrogates"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragon-labs.com"},
]
maintainers = [
    {name = "Terragon Labs Team", email = "team@terragon-labs.com"},
]
keywords = ["optimization", "machine-learning", "surrogate-models", "gradients", "jax"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
    "pandas>=1.3.0",
    "tqdm>=4.60.0",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "loguru>=0.7.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "coverage>=7.0.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "nbsphinx>=0.9.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

gpu = [
    "jax[cuda12_pip]>=0.4.0",
]

benchmark = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
    "psutil>=5.9.0",
]

notebook = [
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
    "ipywidgets>=8.0.0",
    "seaborn>=0.12.0",
]

all = [
    "surrogate-gradient-optim-lab[dev,docs,gpu,benchmark,notebook]",
]

[project.urls]
Homepage = "https://github.com/terragon-labs/surrogate-gradient-optim-lab"
Documentation = "https://docs.terragon-labs.com/surrogate-optim"
Repository = "https://github.com/terragon-labs/surrogate-gradient-optim-lab"
Issues = "https://github.com/terragon-labs/surrogate-gradient-optim-lab/issues"
Changelog = "https://github.com/terragon-labs/surrogate-gradient-optim-lab/blob/main/CHANGELOG.md"

[project.scripts]
surrogate-optim = "surrogate_optim.cli:main"

[tool.setuptools]
packages = ["surrogate_optim"]

[tool.setuptools.package-data]
surrogate_optim = ["py.typed", "data/**/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "jax.*",
    "jaxlib.*",
    "sklearn.*",
    "matplotlib.*",
    "plotly.*",
    "scipy.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=surrogate_optim",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU support",
    "benchmark: marks tests as benchmarks",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["surrogate_optim"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/cli.py",
    "*/examples/*",
    "*/benchmarks/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy
    "RUF", # ruff-specific rules
]

ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "S101",  # Use of assert detected
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S", "PLR2004"]
"examples/*" = ["D", "T20"]
"benchmarks/*" = ["D", "T20"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["surrogate_optim"]
force-sort-within-sections = true