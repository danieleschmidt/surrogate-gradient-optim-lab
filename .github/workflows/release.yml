name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease: $VERSION"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release: $VERSION"
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run full test suite
        run: |
          pytest tests/ -v --cov=surrogate_optim --cov-report=xml

      - name: Verify version consistency
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          
          if [ "$VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "‚ùå Version mismatch: tag=$VERSION, pyproject.toml=$PYPROJECT_VERSION"
            exit 1
          fi
          echo "‚úÖ Version consistency check passed: $VERSION"

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*
          
          # Verify package contents
          python -m tarfile -l dist/*.tar.gz
          python -m zipfile -l dist/*.whl

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            terragonlabs/surrogate-optim
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, build-docker]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > CHANGELOG_TEMP.md
            git log --pretty=format:"- %s (%h)" "$PREV_TAG"..HEAD >> CHANGELOG_TEMP.md
          else
            echo "## Initial Release" > CHANGELOG_TEMP.md
            echo "First release of Surrogate Gradient Optimization Lab" >> CHANGELOG_TEMP.md
          fi
          
          # Add package information
          echo -e "\n## Package Information" >> CHANGELOG_TEMP.md
          echo "- **Version**: $VERSION" >> CHANGELOG_TEMP.md
          echo "- **Python Support**: 3.9, 3.10, 3.11, 3.12" >> CHANGELOG_TEMP.md
          echo "- **Platforms**: Linux, macOS, Windows" >> CHANGELOG_TEMP.md
          
          # Add installation instructions
          echo -e "\n## Installation" >> CHANGELOG_TEMP.md
          echo '```bash' >> CHANGELOG_TEMP.md
          echo "pip install surrogate-gradient-optim-lab==$VERSION" >> CHANGELOG_TEMP.md
          echo '```' >> CHANGELOG_TEMP.md
          
          # Add Docker information
          echo -e "\n## Docker" >> CHANGELOG_TEMP.md
          echo '```bash' >> CHANGELOG_TEMP.md
          echo "docker pull terragonlabs/surrogate-optim:$VERSION" >> CHANGELOG_TEMP.md
          echo '```' >> CHANGELOG_TEMP.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body_path: CHANGELOG_TEMP.md
          files: dist/*
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          generate_release_notes: true

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release]
    environment: release
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          cname: docs.terragon-labs.com

  notify-completion:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [publish-pypi, publish-docs]
    if: always()
    steps:
      - name: Notify Slack
        if: secrets.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            üöÄ Release v${{ needs.validate-release.outputs.version }} completed!
            
            üì¶ PyPI: https://pypi.org/project/surrogate-gradient-optim-lab/
            üê≥ Docker: terragonlabs/surrogate-optim:${{ needs.validate-release.outputs.version }}
            üìñ Docs: https://docs.terragon-labs.com
            
            Status: ${{ job.status }}