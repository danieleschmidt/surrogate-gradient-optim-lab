# Multi-stage production Dockerfile for Surrogate Optimization Lab
FROM python:3.13-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libopenblas-dev \
    liblapack-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /workspace

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Production stage
FROM base as production

# Copy application code
COPY . .

# Install the package
RUN pip install -e .

# Create necessary directories
RUN mkdir -p /workspace/data /workspace/logs /workspace/cache /workspace/results && \
    chown -R appuser:appuser /workspace

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "from surrogate_optim.health.checks import run_health_checks; \
                   import sys; \
                   result = run_health_checks(); \
                   sys.exit(0 if result.all_passed else 1)"

# Expose port
EXPOSE 8000

# Default command
CMD ["python", "-m", "surrogate_optim.cli"]

# Development stage
FROM base as development

# Install development dependencies
RUN pip install --no-cache-dir pytest pytest-cov black mypy ruff bandit safety

# Copy application code
COPY . .

# Install in development mode
RUN pip install -e ".[dev]"

USER appuser

# Command for development
CMD ["python", "-m", "surrogate_optim.cli", "--dev"]

# Research stage (with GPU support)
FROM nvidia/cuda:12.1-devel-ubuntu22.04 as research

# Install Python 3.11
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3-pip \
    build-essential \
    curl \
    git \
    libopenblas-dev \
    liblapack-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# Create symlinks
RUN ln -s /usr/bin/python3.11 /usr/bin/python && \
    ln -s /usr/bin/python3.11 /usr/bin/python3

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    CUDA_VISIBLE_DEVICES=0 \
    JAX_PLATFORM_NAME=gpu

# Create application user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /workspace

# Copy requirements and install dependencies
COPY requirements.gpu.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Install JAX with CUDA support
RUN pip install --no-cache-dir "jax[cuda12_pip]>=0.4.0" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html

# Copy application code
COPY . .

# Install the package
RUN pip install -e ".[gpu,benchmark]"

# Create necessary directories
RUN mkdir -p /workspace/data /workspace/logs /workspace/cache /workspace/results /workspace/research_output && \
    chown -R appuser:appuser /workspace

# Switch to non-root user  
USER appuser

# Health check with GPU awareness
HEALTHCHECK --interval=60s --timeout=30s --start-period=10s --retries=3 \
    CMD python -c "from surrogate_optim.health.checks import run_health_checks; \
                   import jax; \
                   import sys; \
                   print(f'JAX devices: {jax.devices()}'); \
                   result = run_health_checks(); \
                   sys.exit(0 if result.all_passed else 1)"

# Expose port
EXPOSE 8000

# Default command for research workloads
CMD ["python", "-m", "surrogate_optim.research.research_execution_engine"]